// Decompiled with JetBrains decompiler
// Type: TenTec.Windows.iGridLib.iGPropGridDescriptions
// Assembly: TenTec.Windows.iGridLib.iGrid.v6.0, Version=6.0.37.0, Culture=neutral, PublicKeyToken=9d47002745f2416c
// MVID: 417E314E-0FBF-4E4F-8CBF-B713726278B4
// Assembly location: C:\10Tec\iGrid.NET 6.0\Bin\TenTec.Windows.iGridLib.iGrid.v6.0.dll

namespace TenTec.Windows.iGridLib
{
  internal class iGPropGridDescriptions
  {
    public const string cStyleBackColor = "The background color of the cell or column header.";
    public const string cStyleContentIndent = "Determines the indents of the cell or column header contents.";
    public const string cStyleCustomDrawFlags = "Determines which of the cell's parts are custom drawn.";
    public const string cStyleDropDownControl = "Determines the control to show in the drop down form when editing the cell.";
    public const string cStyleFont = "The font used to display the text in the cell or column header.";
    public const string cStyleForeColor = "The color of the text displayed in the cell or column header.";
    public const string cStyleFormatString = "Determines the format string applied to the cell or column header value before it is displayed (similar to the format string parameter in the String.Format method).";
    public const string cStyleImageAlign = "The horizontal and vertical alignment of the image displayed in the cell or column header.";
    public const string cStyleImageList = "The image list that contains the images to display in the cell or column header.";
    public const string cStyleTextAlign = "The horizontal and vertical alignment of the text displayed in the cell or column header.";
    public const string cStyleTextFormatFlags = "Determines the text format flags of the cell or column header(similar to the StringFormatFlags enumeration in .NET Framework).";
    public const string cStyleTextPosToImage = "The relative position of the image and text displayed in the cell or column header.";
    public const string cStyleTextTrimming = "Determines the trimming options of the text dispalyed in the cell or column header (similar to the StringTrimming enumeration in .NET Framework).";
    public const string cCellStyleEmptyStringAs = "Determines how to interpret an empty string entered in the text box while editing the cell.";
    public const string cCellStyleEnabled = "Determines whether the cell is enabled. The disabled cells cannot be edited and the ForeColorDisabled color is used to draw their text.";
    public const string cCellStyleFitContentsInViewport = "Determines whether iGrid forces drawing of cell contents in the viewport.";
    public const string cCellStyleFlags = "Additional flags used to specify some options of the cell.";
    public const string cCellStyleMaxInputLength = "Gets or sets the maximum number of characters the user can type or paste into the cell while editing.";
    public const string cCellStyleReadOnly = "Determines whether the cell value can be edited.";
    public const string cCellStyleSelectable = "Determines whether the cell can be selected with the mouse and/or keyboard.";
    public const string cCellStyleSingleClickEdit = "Determines whether the single mouse click starts editing a not current cell. If False, only the current cell can be edited with the single mouse click; otherwise, the single click on any of the cells starts its editing.";
    public const string cCellStyleType = "The type of the cell (a text box cell, a check box cell, etc).";
    public const string cCellStyleTypeFlags = "The additional flags used to modify some aspects of the cell type.";
    public const string cCellStyleValueType = "Determines the type of the value to convert the edited text to.";
    public const string cCellBackColor = "Determines the background color of the cell.";
    public const string cCellCol = "The column that contains the cell.";
    public const string cCellContentIndent = "Determines the left, top, right, and bottom indents of the cell's contents.";
    public const string cCellCustomDrawFlags = "Determines which of the cell's parts are custom drawn.";
    public const string cCellDropDownControl = "Determines the control to show in the drop-down form when editing the cell.";
    public const string cCellEmptyStringAs = "Determines how to interpret an empty string entered in the text box while editing the cell.";
    public const string cCellEnabled = "Determines whether the cell is enabled. The disabled cells cannot be edited and the ForeColorDisabled color is used to draw their text.";
    public const string cCellFitContentsInViewport = "Determines whether iGrid forces drawing of cell contents in the viewport.";
    public const string cCellFlags = "Flags that determine appearance and behavior of the cell.";
    public const string cCellFont = "Determines the font used to display the text in the cell.";
    public const string cCellForeColor = "Determines the color of the text displayed in the cell.";
    public const string cCellFormatString = "Determines the format string applied to the cell's value before it is displayed (similar to the formatString parameter in the Format method of the String class).";
    public const string cCellImageAlign = "Determines the horizontal and vertical alignment of the image displayed in the cell.";
    public const string cCellImageList = "Determines the image list used to display the image in the cell.";
    public const string cCellMaxInputLength = "Gets or sets the maximum number of characters the user can type or paste into the cell while editing.";
    public const string cCellReadOnly = "Determines whether the cell can be edited.";
    public const string cCellRow = "The row that contains the cell.";
    public const string cCellSelectable = "Determines whether the cell can be selected with the mouse and/or keyboard.";
    public const string cCellSingleClickEdit = "Determines whether the single mouse click starts editing the cell if it is not current.";
    public const string cCellTextAlign = "Determines the horizontal and vertical alignment of the text displayed in the cell.";
    public const string cCellTextFormatFlags = "Determines the text format flags of the cell (similar to the FormatFlags property of the StringFormat class).";
    public const string cCellTextPosToImage = "Determines the relative position of the image and text displayed in the cell.";
    public const string cCellTextTrimming = "Determines the trimming options of the text dispalyed in the cell (similar to the Trimming property of the StringFormat class).";
    public const string cCellType = "Determines the type of the cell (a text box cell, a check box cell, etc).";
    public const string cCellTypeFlags = "Determines the additional flags used to modify some aspects of the cell's type.";
    public const string cCellValueType = "Determines the type of the value to convert the edited text to.";
    public const string cColHdrStyleFlags = "Additional flags used to specify some options of the column header.";
    public const string cColHdrStyleSortInfoVisible = "Determines whether to display the sort info in the column header when the column is sorted. Use this property for the narrow columns.";
    public const string cColHdrBackColor = "Determines the background color of the column header.";
    public const string cColHdrContentIndent = "Determines the left, top, right, and bottom indents of the column header contents.";
    public const string cColHdrCustomDrawFlags = "Determines which of the column header's parts are custom drawn.";
    public const string cColHdrDropDownControl = "Determines the control to show in the drop-down form when clicking the column header's combo button.";
    public const string cColHdrFlags = "Determines appearance and behavior of the column header.";
    public const string cColHdrFont = "Determines the font used to display the text in the column header.";
    public const string cColHdrForeColor = "Determines the color of the text displayed in the column header.";
    public const string cColHdrFormatString = "Determines the format string applied to the column header's value before it is displayed (similar to the format string parameter in the Format method of the String class).";
    public const string cColHdrImageAlign = "Determines the horizontal and vertical alignment of the image displayed in the column header.";
    public const string cColHdrImageList = "Determines the image list used to display the image in the column header.";
    public const string cColHdrSortInfoVisible = "Determines whether to display the sort info in the column header when the column is sorted.";
    public const string cColHdrSpanCols = "Gets or sets the number of columns to span.";
    public const string cColHdrSpanRoot = "The root cell of the merged header cell.";
    public const string cColHdrSpanRows = "Gets or sets the number of rows to span.";
    public const string cColHdrTextAlign = "Determines the horizontal and vertical alignment of the text displayed in the column header.";
    public const string cColHdrTextFormatFlags = "Determines the text format flags of the column header (similar to the StringFormatFlags enumeration in .NET Framework).";
    public const string cColHdrTextPosToImage = "Determines the relative position of the image and text displayed in the column header.";
    public const string cColHdrTextTrimming = "Determines the trimming options of the text dispalyed in the column header (similar to the StringTrimming enumeration in .NET Framework).";
    public const string cColHdrValue = "Determines the value of the column header used to display its text.";
    public const string cColHdrImageIndex = "Determines the index of the image displayed in the column header.";
    public const string cColHdrStyle = "A style object determining the appearance and behavior of the column header.";
    public const string cIndentLeft = "The left indent of the cell or column header contents.";
    public const string cIndentRight = "The right indent of the cell or column header contents.";
    public const string cIndentTop = "The top indent of the cell or column header contents.";
    public const string cIndentBottom = "The bottom indent of the cell or column header contents.";
    public const string cColPatternWidth = "The width of the column.";
    public const string cColPatternVisible = "Determines whether the column is visible.";
    public const string cColPatternIncludeInSelect = "Determines whether the cells of the column can be selected.";
    public const string cColPatternMinWidth = "The minimal width of the column.";
    public const string cColPatternMaxWidth = "The maximal width of the column.";
    public const string cColPatternAllowSizing = "Determines whether the column can be resized thru visual interface.";
    public const string cColPatternAllowMoving = "Determines whether the order of the column can be changed.";
    public const string cColPatternAllowGrouping = "Determines whether the rows can be grouped by this column.";
    public const string cColPatternSortType = "The default sort type of the column.";
    public const string cColPatternSortOrder = "The default sort order of the column.";
    public const string cColPatternCustomGrouping = "Determines whether to apply custom grouping to the column.";
    public const string cColPatternText = "The text displayed in the column's header.";
    public const string cColPatternImageIndex = "The index of the image displayed in the column's header.";
    public const string cColPatternColHdrStyle = "A style object determining the appearance and behavior of the column's header.";
    public const string cColPatternDefaultCellValue = "The value that will have the new cells of the column.";
    public const string cColPatternDefaultCellImageIndex = "The image index that will have the new cells of the column.";
    public const string cColPatternCellStyle = "A style object determining the appearance and behavior of the column's cells.";
    public const string cColPatternKey = "The string key of the column.";
    public const string cRowPatternCellStyle = "A style object determining the appearance and behavior of the row's cells.";
    public const string cRowPatternHeight = "The height of the row. Ignored if DefaultRowHeightAutoSet is True.";
    public const string cRowPatternNormalCellHeight = "The height of the cells above the row text cell. Ignored if DefaultRowHeightAutoSet is True.";
    public const string cRowPatternVisible = "Determines whether the row is visible.";
    public const string cRowPatternVisibleParentExpanded = "Determines whether the row is visible when its parent is expanded.";
    public const string cRowPatternType = "The type of the row.";
    public const string cRowPatternLevel = "The horizontal indent of the first cell in the row. Helps to create a treelike grid.";
    public const string cRowPatternExpanded = "Determines whether the row is expanded or collapsed.";
    public const string cRowPatternSortable = "Determines whether the row can change its position while sorting.";
    public const string cRowPatternTreeButton = "The state of the row's tree button.";
    public const string cRowPatternKey = "The string key of the row.";
    public const string cRowPatternSelectable = "Indicates whether the specified row can be selected.";
    public const string cDropDownListSelectedItemChanged = "Occurs when the selected item in the drop down list is changed.";
    public const string cDropDownListAutoWidth = "Determines whether the drop down list is of the fixed width, needed to show all its contents entirely.";
    public const string cDropDownListTextAlign = "Determines the horizontal and vertical alignment of the item text.";
    public const string cDropDownListImageAlign = "Determines the horizontal and vertical alignment of the images displayed in the items.";
    public const string cDropDownListTextPosToImage = "Determines the relative position of the image and text displayed in the items.";
    public const string cDropDownListMaxVisibleRowCount = "Determines the maximal count of the rows visible in the drop down list simultaneously.";
    public const string cDropDownListItems = "The items of the drop down list.";
    public const string cDropDownListImageList = "The ImageList that contains the images displayed in the drop down list. If a cell style is not assigned to a cell, the image list also will be used to display the image in the cell.";
    public const string cDropDownListItemValue = "Determines the value that is set to a cell when the item in the drop down list is selected. If the DisplayValue property of the item is null (Nothing in VB), this property is used to display the text in the drop down list.";
    public const string cDropDownListItemDisplayValue = "Determines the value used to display the text in the drop down list and in the cells, which Value property equals to the item's Value property.";
    public const string cDropDownListItemDisplayImageIndex = "Determines the index of the image displayed in the drop down list and in the cells, which Value property is equal to the item's Value property.";
    public const string cDropDownListItemVisible = "Determines whether the item is visible.";
    public const string cDropDownListItemBackColor = "Determines the background color of the item.";
    public const string cDropDownListItemForeColor = "Determines the foreground color of the item.";
    public const string cDropDownListItemSelectable = "Determines whether the item can be selected.";
    public const string cDropDownListFont = "The font used to display the items in the drop down list. If not set, the cell font is used.";
    public const string cDropDownListForeColor = "Determines the color of the text of the list items.";
    public const string cDropDownListBackColor = "Determines the background color of the list items.";
    public const string cDropDownListSelItemForeColor = "Determines the color of the text of the selected item.";
    public const string cDropDownListSelItemBackColor = "Determines the background color of the selected item.";
    public const string cDropDownListMinWidth = "The minimal width of the drop down list.";
    public const string cAfterAutoGroupRowCreated = "Occurs after a group row has been automatically created while grouping.";
    public const string cAfterCommitEdit = "Occurs when the user has finished cell editing and the changes have been committed.";
    public const string cAfterContentsGrouped = "Occurs after the rows have been grouped by a column.";
    public const string cAfterContentsSorted = "Occurs after the rows have been sorted by a column.";
    public const string cAfterRowStateChanged = "Occurs after the user has collapsed or expanded a group of rows.";
    public const string cUnmergeCellsRequired = "Occurs when iGrid must unmerge cells to complete the user action.";
    public const string cBeforeCommitEdit = "Occurs when the user tries to commit cell changes.";
    public const string cBeforeContentsGrouped = "Occurs before the rows are grouped by a column.";
    public const string cBeforeContentsSorted = "Occurs before the rows are sorted by a column.";
    public const string cBeforeRowStateChanged = "Occurs before the user collapse/expand a group of rows.";
    public const string cCancelEdit = "Occurs when the user has finished cell editing and the changes have been aborted.";
    public const string cCellClick = "Occurs when a cell is clicked.";
    public const string cCellDoubleClick = "Occurs when a cell is double-clicked.";
    public const string cCellMouseDown = "Occurs when the mouse pointer is over a cell and a mouse button is pressed.";
    public const string cCellMouseEnter = "Occurs when the mouse pointer enters a cell.";
    public const string cCellMouseLeave = "Occurs when the mouse pointer leaves a cell.";
    public const string cCellMouseMove = "Occurs when the mouse pointer moves over a cell.";
    public const string cCellMouseUp = "Occurs when the mouse pointer is over a cell and a mouse button is released.";
    public const string cColDividerDoubleClick = "Occurs when the divider of a column header is double-clicked. The default action is adjusting of the column's width.";
    public const string cColHdrClick = "Occurs when a column header is clicked.";
    public const string cColHdrDoubleClick = "Occurs when a column header is double-clicked.";
    public const string cColHdrDragging = "Occurs while dragging a column header. Use this event to limit legal positions of the column.";
    public const string cColHdrEndDrag = "Occurs when column header dragging has been finished. The default action is column grouping or moving.";
    public const string cColHdrMouseDown = "Occurs when the mouse pointer is over a column header and a mouse button is pressed. Using this event you can prohibit sorting of a column and indication of the pressed state of the column's header.";
    public const string cColHdrMouseEnter = "Occurs when the mouse pointer enters a column header.";
    public const string cColHdrMouseLeave = "Occurs when the mouse pointer leaves a column header.";
    public const string cColHdrMouseMove = "Occurs when the mouse pointer moves over a column header.";
    public const string cColHdrMouseUp = "Occurs when the mouse pointer is over a column header and a mouse button is released.";
    public const string cColHdrStartDrag = "Occurs when the user starts to drag a column header.";
    public const string cColWidthChanging = "Occurs while the user resizes a column.";
    public const string cColWidthEndChange = "Occurs when the user has finished column resizing.";
    public const string cColWidthStartChange = "Occurs when the user starts column resizing.";
    public const string cColsAdded = "Occurs when a new column or a bunch of columns has been added to the grid.";
    public const string cColsRemoving = "Occurs when a column or a bunch of columns is about to be deleted.";
    public const string cColsRemoved = "Occurs when a column or a bunch of columns has been deleted.";
    public const string cCurCellChanged = "Occurs when the current cell is changed.";
    public const string cCurCellChangeRequest = "Occurs when the current cell is about to be changed by the user.";
    public const string cCurRowChanged = "Occurs when the current row is changed.";
    public const string cCurRowChangeRequest = "Occurs when the current row is about to be changed by the user.";
    public const string cCustomDrawCellBackground = "Occurs when the background of a custom draw cell is redrawn.";
    public const string cCustomDrawCellForeground = "Occurs when the foreground of a custom draw cell is redrawn.";
    public const string cCustomDrawCellGetHeight = "Occurs when the grid needs the height enough to display the contents of a custom draw cell without clipping.";
    public const string cCustomDrawCellGetWidth = "Occurs when the grid needs the width enough to display the contents of a custom draw cell without clipping.";
    public const string cCustomDrawColHdrBackground = "Occurs when the background of a custom draw column header is redrawn.";
    public const string cCustomDrawColHdrForeground = "Occurs when the foreground of a custom draw column header is redrawn.";
    public const string cCustomDrawColHdrGetHeight = "Occurs when the grid needs the height enough to display the contents of a custom draw column header without clipping.";
    public const string cCustomDrawColHdrGetWidth = "Occurs when the grid needs the width enough to display the contents of a custom draw column header without clipping.";
    public const string cCustomDrawCellEllipsisButtonForeground = "Occurs when the foreground of a cell ellipsis button is redrawn.";
    public const string cCustomDrawCellEllipsisButtonBackground = "Occurs when the background of a cell ellipsis button is redrawn.";
    public const string cCustomDrawCellComboButton = "Occurs when a cell combo box button is redrawn.";
    public const string cCustomDrawColHdrComboButton = "Occurs when a column header combo box button is redrawn.";
    public const string cCustomDrawFooterCellBackground = "Occurs when the background of a custom draw footer cell is redrawn.";
    public const string cCustomDrawFooterCellForeground = "Occurs when the foreground of a custom draw footer cell is redrawn.";
    public const string cCustomDrawFooterCellGetHeight = "Occurs when the grid needs the height enough to display the contents of a custom draw footer cell without clipping.";
    public const string cCustomDrawFooterCellGetWidth = "Occurs when the grid needs the width enough to display the contents of a custom draw footer cell without clipping.";
    public const string cCustomDrawFooterRowHdr = "Allows you to draw custom contents in the footer row header area.";
    public const string cCustomSort = "Occurs when the grid requires to compare cells while sorting by custom criterion.";
    public const string cCellDynamicStringFormat = "Occurs when the grid determines the StringFormat object to draw the text in a cell. Allows you to adjust the string format dynamically.";
    public const string cFillWithDataRowAdded = "Occurs when a next row has been created and populated from within the FillWithData method.";
    public const string cFooterCellClick = "Occurs when a footer cell is clicked.";
    public const string cFooterCellDoubleClick = "Occurs when a footer cell is double-clicked.";
    public const string cFooterCellMouseDown = "Occurs when the mouse pointer is over a footer cell and a mouse button is pressed.";
    public const string cFooterCellMouseEnter = "Occurs when the mouse pointer enters a footer cell.";
    public const string cFooterCellMouseLeave = "Occurs when the mouse pointer leaves a footer cell.";
    public const string cFooterCellMouseMove = "Occurs when the mouse pointer moves over a footer cell.";
    public const string cFooterCellMouseUp = "Occurs when the mouse pointer is over a footer cell and a mouse button is released.";
    public const string cHScrollBarCustomButtonClick = "Occurs when a custom button of the horizontal scroll bar is clicked.";
    public const string cHScrollBarCustomButtonDrawBackground = "Occurs when the background of a custom button of the horizontal scroll bar is redrawn.";
    public const string cHScrollBarCustomButtonDrawForeground = "Occurs when the foreground of a custom button of the horizontal scroll bar is redrawn.";
    public const string cHScrollBarCustomButtonMouseDown = "Occurs when the mouse pointer is over a custom button of the horizontal scroll bar and a mouse button is pressed.";
    public const string cHScrollBarCustomButtonMouseEnter = "Occurs when the mouse pointer enters a custom button of the horizontal scroll bar.";
    public const string cHScrollBarCustomButtonMouseLeave = "Occurs when the mouse pointer leaves a custom button of the horizontal scroll bar.";
    public const string cHScrollBarCustomButtonMouseMove = "Occurs when the mouse pointer moves over a custom button of the horizontal scroll bar.";
    public const string cHScrollBarCustomButtonMouseUp = "Occurs when the mouse pointer is over a custom button of the horizontal scroll bar and a mouse button is released.";
    public const string cIncludeRowInTotalsCalculation = "Determines whether a row is included in the calculation of totals.";
    public const string cQuitCustomEdit = "Occurs when the grid demands to quit custom editing immediately.";
    public const string cRecalculateTotals = "Occurs when the totals in the footer should be recalculated.";
    public const string cRequestEdit = "Occurs before the user starts cell editing.";
    public const string cRowsAdded = "Occurs when a new row or a bunch of rows has been added to the grid.";
    public const string cRowsRemoving = "Occurs when a row or a bunch of rows is about to be deleted.";
    public const string cRowsRemoved = "Occurs when a row or a bunch of rows has been deleted.";
    public const string cRowVisibleChanged = "Occurs when a row is hidden or shown through its Visible property.";
    public const string cSelectionChanged = "Occurs when the selection is changed.";
    public const string cSelectionChanging = "Occurs while the selection is changing with mouse pressed move.";
    public const string cSelectionEndChange = "Occurs when the selection has been changed with mouse pressed move.";
    public const string cSelectionStartChange = "Occurs when selection with mouse pressed move is started.";
    public const string cVScrollBarVisibleChanged = "Occurs when the vertical scroll bar is shown or hided.";
    public const string cHScrollBarVisibleChanged = "Occurs when the horizontal scroll bar is shown or hided.";
    public const string cVScrollBarWidthChanged = "Occurs when the width of the vertical scroll bar is changed.";
    public const string cHScrollBarHeightChanged = "Occurs when the height of the horizontal scroll bar is changed.";
    public const string cVScrollBarScroll = "Occurs when the scroll box of the vertical scroll bar has been moved by either a mouse or keyboard action.";
    public const string cHScrollBarScroll = "Occurs when the scroll box of the horizontal scroll bar has been moved by either a mouse or keyboard action.";
    public const string cVScrollBarValueChanged = "Occurs when the Value property of the vertical scroll bar has changed, either by the user or programmatically.";
    public const string cHScrollBarValueChanged = "Occurs when the Value property of the horizontal scroll bar has changed, either by the user or programmatically.";
    public const string cVScrollBarValueChanging = "Occurs when the Value property of the vertical scroll bar is about to change, either by the user or programmatically.";
    public const string cHScrollBarValueChanging = "Occurs when the Value property of the horizontal scroll bar is about to change, either by the user or programmatically.";
    public const string cVScrollBarCustomButtonClick = "Occurs when a custom button of the vertical scroll bar is clicked.";
    public const string cVScrollBarCustomButtonDrawBackground = "Occurs when the background of a custom button of the vertical scroll bar is redrawn.";
    public const string cVScrollBarCustomButtonDrawForeground = "Occurs when the foreground of a custom button of the vertical scroll bar is redrawn.";
    public const string cVScrollBarCustomButtonMouseDown = "Occurs when the mouse pointer is over a custom button of the vertical scroll bar and a mouse button is pressed.";
    public const string cVScrollBarCustomButtonMouseEnter = "Occurs when the mouse pointer enters a custom button of the vertical scroll bar.";
    public const string cVScrollBarCustomButtonMouseLeave = "Occurs when the mouse pointer leaves a custom button of the vertical scroll bar.";
    public const string cVScrollBarCustomButtonMouseMove = "Occurs when the mouse pointer moves over a custom button of the vertical scroll bar.";
    public const string cVScrollBarCustomButtonMouseUp = "Occurs when the mouse pointer is over a custom button of the vertical scroll bar and a mouse button is released.";
    public const string cCustomGroupValue = "Occurs when the grid requires the custom group value of a cell in a column with custom grouping.";
    public const string cTextBoxKeyDown = "Occurs when a key is pressed while editing a text box cell.";
    public const string cTextBoxKeyPress = "Occurs when a key is pressed while editing a text box cell.";
    public const string cTextBoxKeyUp = "Occurs when a key is released while editing a text box cell.";
    public const string cTextBoxTextChanged = "Occurs when the value of the text box in a text cell has been changed.";
    public const string cTextBoxFilterKey = "Occurs before a key char is processed by the text box in a text cell. Allows you to filter the input chars.";
    public const string cCellEllipsisButtonClick = "Occurs when the ellipsis button in a cell is clicked.";
    public const string cCustomDrawRowHdrBackground = "Occurs when the background of a row header is redrawn.";
    public const string cCustomDrawRowHdrForeground = "Occurs when the foreground of a row header is redrawn.";
    public const string cCustomDrawRowHdrGetWidth = "Occurs when the grid requires the width necessary to display all the contents of a custom draw row header entirely (occurs while row header width adjusting).";
    public const string cCustomDrawRowHdrGetHeight = "Occurs when the grid requires the height necessary to display all the contents of a custom draw row header entirely (occurs while row height adjusting).";
    public const string cStartDragCell = "Occurs after the user has pressed the left or right mouse button over a cell and moved the mouse pointer more than 4 pixels in any direction. Use this event to start drag-and-drop operations.";
    public const string cRowHdrClick = "Occurs when a row header is clicked.";
    public const string cRowHdrDoubleClick = "Occurs when a row header is double-clicked.";
    public const string cRowHdrMouseDown = "Occurs when the mouse pointer is over a row header and a mouse button is pressed.";
    public const string cRowHdrMouseEnter = "Occurs when the mouse pointer enters a row header.";
    public const string cRowHdrMouseLeave = "Occurs when the mouse pointer leaves a row header.";
    public const string cRowHdrMouseMove = "Occurs when the mouse pointer moves over a row header.";
    public const string cRowHdrMouseUp = "Occurs when the mouse pointer is over a row header and a mouse button is released.";
    public const string cRequestRowResize = "Occurs when the mouse pointer is near a row edge. This event allows you to prohibit resizing separate rows as well as set their minimal and maximal heights.";
    public const string cRowHeightChanging = "Occurs while the user resizes a row.";
    public const string cRowHeightEndChange = "Occurs when the user has finished resizing a row.";
    public const string cRowHeightStartChange = "Occurs when the user starts resizing a row.";
    public const string cRowDividerDoubleClick = "Occurs when the divider of a row is double-clicked. The default action is adjusting of the rows's width.";
    public const string cRowHdrDynamicBackColor = "Occurs when the grid determines the background color of a row header while drawing. Allows you to adjust the background color dynamically.";
    public const string cRequestSearchAsTypeMatchRule = "Occurs before iGrid starts searching as typing and allows you to dynamically specify the match rule for a column.";
    public const string cSearchAsTypeCustomCompare = "Occurs when searching as typing by a custom criterion and allows you to specify whether a cell matches the search criterion.";
    public const string cDropDownListSearchAsTypeCustomCompare = "Occurs when searching as typing by a custom criterion and allows you to specify whether an item matches the search criterion.";
    public const string cSearchAsTypeRowSetChanged = "Occurs when the set of visible rows has changed when searching as typing.";
    public const string cRequestDropDownControl = "Occurs when the grid requests a drop-down control for a cell. This event allows you to dynamically attach a drop-down control to the cell.";
    public const string cRequestAutoCompleteControl = "Occurs when the grid requests an auto-complete control for a cell. This event allows you to dynamically attach an auto-complete control to the cell.";
    public const string cRequestCellToolTipText = "Occurs when the mouse pointer enters a cell, and iGrid is determining whether a tool tip should be displayed for this cell.";
    public const string cRequestColHdrToolTipText = "Occurs when the mouse pointer enters a column header, and iGrid is determining whether a tool tip should be displayed for this column header.";
    public const string cRequestCellElemControlToolTipText = "Occurs when the mouse pointer enters an elementary control (such as combo btton) in a cell, and iGrid is determining whether a tool tip should be displayed for it.";
    public const string cRequestColHdrElemControlToolTipText = "Occurs when the mouse pointer enters a control (such as combo btton) in a column header, and iGrid is determining whether a tool tip should be displayed for it.";
    public const string cRequestFooterCellToolTipText = "Occurs when the mouse pointer enters a footer cell, and iGrid is determining whether a tool tip should be displayed for this cell.";
    public const string cCellDynamicContents = "Occurs when iGrid needs to get the text and image which are displayed in a cell. Use this event to dynamically specify them.";
    public const string cCellDynamicFormatting = "Occurs when the grid determines the background and foreground colors and the font of a cell while drawing. Allows you to adjust the colors and font dynamically.";
    public const string cColOrderChanged = "Occurs just after a set of columns has changed their visible order.";
    public const string cTextBoxMouseHover = "Occurs when the mouse pointer rests on the text box used to edit text cells.";
    public const string cTextBoxMouseLeave = "Occurs when the mouse pointer leaves the text box used to edit text cells.";
    public const string cTextBoxMouseEnter = "Occurs when the mouse pointer enters the text box used to edit text cells.";
    public const string cTextBoxMouseDoubleClick = "Occurs when the text box used to edit text cells is double-clicked.";
    public const string cTextBoxMouseClick = "Occurs when the text box used to edit text cells is clicked by the mouse.";
    public const string cTextBoxMouseMove = "Occurs when the mouse pointer is moved over the text box used to edit text cells.";
    public const string cTextBoxMouseUp = "Occurs when the mouse pointer is over the text box used to edit text cells and a mouse button is released.";
    public const string cTextBoxMouseDown = "Occurs when the mouse pointer is over the text box used to edit text cells and a mouse button is pressed.";
    public const string cCustomDrawLevelIndentPart = "Occurs when the grid is drawing level indents and allows you to customize the level indent parts.";
    public const string cCustomDrawBackground = "Occurs when the grid is drawing its background.";
    public const string cPostPaint = "Occurs when the grid finished all drawing operations.";
    public const string cAdjustTreeButtonLocation = "Occurs when the grid is determining a tree button's Y-coordinate. Allows you to customize the Y-coordinate.";
    public const string cDropDownListGetItemByTextCustomCompare = "Occurs when the grid tries to find a drop-down item by the entered text.";
    public const string cColHdrComboBeforeCommit = "Occurs when the user tries to select an item in the drop-down list attached to the column header.";
    public const string cColHdrComboAfterCommit = "Occurs when the user has selected an item in the drop-down list attached to the column header.";
    public const string cColHdrComboCancel = "Occurs when the user has cancelled the selection of an item in the drop-down list attached to the column header.";
    public const string cAdjustScrollBarValuesRedrawOff = "Specifies whether to change the scroll bar values even if iGrid updates are turned off.";
    public const string cAppearance = "The style of the controls in the cells (the combo buttons and check boxes).";
    public const string cAutoResizeCols = "Determines whether to keep the width of all the columns equal to the width of the grid's client area.";
    public const string cAutoWidthColMode = "Determines whether to take into account the header and/or cells of the column when adjusting its width.";
    public const string cBackColorEvenRows = "The background color of the cells in the even rows.";
    public const string cBackColorOddRows = "The background color of the cells in the odd rows.";
    public const string cBorderColor = "The color of the Flat and Standard border.";
    public const string cBorderStyle = "The style of the border.";
    public const string cBorderWidth = "The width of the Flat border.";
    public const string cCalculateTotals = "Determines whether totals are recalculated on appropriate events";
    public const string cCellCtrlBackColor = "The background color of the controls in the cells (the combo buttons and check boxes). If not set, the BackColor property of the parent control is used.";
    public const string cCellCtrlForeColor = "The foreground color of the controls in the cells (the arrows in the combo buttons and the ticks in the check boxes). If not set, the ForeColor property is used.";
    public const string cCols = "The collection of the columns.";
    public const string cCurCellBackColor = "The background color of the current cell.";
    public const string cCurCellForeColor = "The color of the text in the current cell.";
    public const string cCurCellBackColorNoFocus = "The background color of the current cell when the grid does not have focus.";
    public const string cCurCellForeColorNoFocus = "The color of the text in the current cell when the grid does not have focus.";
    public const string cDefaultAutoGroupRow = "The default parameters of the automatically created group rows.";
    public const string cDefaultAutoGroupRowHeight = "The default height of the automatically created group rows. Ignored if DefaultRowHeightAutoSet is True.";
    public const string cDefaultAutoGroupRowExpanded = "Determines whether the automatically created group rows are expanded by default.";
    public const string cDefaultAutoGroupRowTreeButton = "The default state of the tree button of the automatically created group rows.";
    public const string cDefaultCol = "The default parameters of the columns.";
    public const string cDefaultRow = "The default parameters of the rows.";
    public const string cDefaultRowHeightAutoSet = "Determines whether DefaultRow.Height and DefaultRow.NormalCellHeight are rewritten with optimal values to display 1 line of cell text after initialization in ISupportInitialize.EndInit().";
    public const string cGridLinesExtendMode = "Allows you to specify whether to extend the grid lines horizontally or vertically.";
    public const string cFocusRect = "Determines whether to display the focus rectangle.";
    public const string cFocusRectColor1 = "The first color of the focus rectangle.";
    public const string cFocusRectColor2 = "The second color of the focus rectangle.";
    public const string cForeColorDisabled = "The color of the text displayed in the disabled cells.";
    public const string cFrozenArea = "The set of properties which allow you to set up the frozen rows and columns.";
    public const string cFrozenAreaRowCount = "The count of the non-scrollable rows.";
    public const string cFrozenAreaColCount = "The count of the non-scrollable columns.";
    public const string cFrozenAreaRowsEdge = "The style of the grid line which separates the frozen rows from non-frozen.";
    public const string cFrozenAreaColsEdge = "The style of the grid line which separates the frozen columns from non-frozen.";
    public const string cFrozenAreaSortFrozenRows = "Determines whether to sort the frozen rows.";
    public const string cPenStyleColor = "The color of the grid line.";
    public const string cPenStyleWidth = "The width of the grid line.";
    public const string cPenStyleDashStyle = "The dash style of the grid line.";
    public const string cGridLinesMode = "Determines which of the grid lines are visible.";
    public const string cGroupBox = "The set of properties which allow you to set up the group box.";
    public const string cGropBoxVisible = "Determines whether the group box is visible or not.";
    public const string cLocalStringsGroupBoxHintText = "The text displayed in the group box when none of the columns are grouped.";
    public const string cGropBoxHintForeColor = "The color of the text displayed in the group box when none of the columns are grouped. If not set, the ForeColorDisabled property is used.";
    public const string cGropBoxHintBackColor = "The background color of the text displayed in the group box when none of the columns are grouped. If not set, the BackColor property of the header is used.";
    public const string cGropBoxBackColor = "The color of the group box's background. If not set, the color is calculated from the BackColor property of the header.";
    public const string cGropBoxColHdrBorderColor = "The color of the column header borders in the group box and of the lines connecting the column headers in the group box. If not set, the color is calculated from the BackColor property of the header.";
    public const string cGroupRowLevelStyles = "Determines the array of styles used for the automatically created group rows.";
    public const string cFooter = "The set of properties which allow you to set up the footer.";
    public const string cFooterAutoHeightEvents = "Determines when footer row heights are adjusted automatically.";
    public const string cFooterBackColor = "The background color of the footer.";
    public const string cFooterForeColor = "The color of the text displayed in the footer.";
    public const string cFooterFont = "The font used to display the text in the footer.";
    public const string cFooterHeight = "The height of visible footer rows (if auto-height events are not used).";
    public const string cFooterImageList = "Images to display in the footer.";
    public const string cFooterSeparatingLine = "The style of the grid line that separates the footer from the cells.";
    public const string cFooterVisible = "Determines whether the footer is visible or not.";
    public const string cHeader = "The set of properties which allow you to set up the header.";
    public const string cHeaderAutoHeightEvents = "Determines when header row heights are adjusted automatically.";
    public const string cHeaderVisible = "Determines whether the header is visible or not.";
    public const string cHeaderVGridLinesStyle = "The style of the header's vertical grid lines. Use this property when the DrawSystem is False.";
    public const string cHeaderHGridLinesStyle = "The style of the header's horizontal grid lines. Use this property when the DrawSystem is False.";
    public const string cHeaderDrawSystem = "Determines whether to display the header using the system styles. Use in conjunction with the the UseXPStyles and Appearance properties.";
    public const string cHeaderBackColor = "The background color of the header. If not set, the CellCtrlBackColor is used.";
    public const string cHeaderSolidSortIconColor = "The color of the solid sort arrow (the Flat and XP styles). If not set, the CellCtrlForeColor property is used.";
    public const string cHeaderUseXPStyles = "Determines whether to use the WindowsXP visual styles if they are available to display the header. Acts only if the DrawSystem is True.";
    public const string cHeaderAppearance = "The style of the header (3D or Flat). Acts only if the DrawSystem is True.";
    public const string cHeaderHeight = "The height of visible header rows (if auto-height events are not used).";
    public const string cHeaderImageList = "Images to display in the header.";
    public const string cHeaderHotTrackFlags = "A value indicating what part of a header cell should indicate hot state when the WindowsXP visual styles are not active.";
    public const string cHeaderHotTrackFlagsXPStyles = "A value indicating what part of a header cell should indicate hot state when the WindowsXP visual styles are active.";
    public const string cHeaderHotTracking = "Determines whether the header cells should indicate hot state.";
    public const string cHeaderHotTrackForeColor = "The color of the text in the hot header cell. Acts only if the Text flag is included in the HotTrackFalgs or HotTrackFalgsXPStyles.";
    public const string cHeaderHotTrackIconDegree = "The intense of icon highlighting in the hot header cell. Acts only if the Icon flag is included in the HotTrackFalgs or HotTrackFalgsXPStyles.";
    public const string cHeaderSeparatingLine = "The style of the grid line that separates the header from the cells.";
    public const string cHeaderFont = "The font used to display the text in the header. If not set, the Font property of the grid is used.";
    public const string cHeaderForeColor = "The color of the text displayed in the header. If not set, the CellCtrlForeColor property is used.";
    public const string cHeaderAllowPress = "Allows you to prohibit sorting thru visual interface for all the columns at once. If this property is False the header cells will not indicate pressed state.";
    public const string cGridLinesHorizontal = "The style of the horizontal grid lines.";
    public const string cSelCellsBackColor = "The background color of the selected cells when the grid has focus.";
    public const string cSelCellsBackColorNoFocus = "The background color of the selected cells when the grid does not have focus.";
    public const string cSelCellsForeColor = "The color of the text in the selected cells when the grid has focus.";
    public const string cSelCellsForeColorNoFocus = "The color of the text in the selected cells when the grid does not have focus.";
    public const string cSelRowsBackColor = "The background color of the selected rows when the grid has focus.";
    public const string cSelRowsBackColorNoFocus = "The background color of the selected rows when the grid does not have focus.";
    public const string cSelRowsForeColor = "The color of the text in the selected rows when the grid has focus.";
    public const string cSelRowsForeColorNoFocus = "The color of the text in the selected rows when the grid does not have focus.";
    public const string cHighlightSelCells = "Determines whether the selected cells should be highlighted.";
    public const string cHighlightSelCellItems = "Determines whether the images and controls in the selected cells should be highlighted.";
    public const string cHScrollBar = "The set of the properties which allow you to set up the horizontal scroll bar.";
    public const string cScrollBarEnabled = "Determines whether the scroll bar is enabled when the cells does not room the client area.";
    public const string cScrollBarSmallChange = "A value to be added to or subtracted from the Value property when the scroll box is moved a small distance.";
    public const string cScrollBarCustomButtons = "The collection of the additional scroll bar buttons.";
    public const string cScrollBarVisibility = "Determines whether the scroll bar is visible always, when necessary or never.";
    public const string cImageList = "The images to display in the cells.";
    public const string cImmediateColResizing = "Determines whether a column should be resized immediately as the user is dragging the edge of the column's header.";
    public const string cPageCapacity = "The capacity of the cell pages.";
    public const string cPasswordChar = "Gets or sets the custom character used to mask characters of a password.";
    public const string cEnsureVisibleAutoHScroll = "Specifies whether to scroll the grid automatically in the horizontal direction to fully display the current cell.";
    public const string cEnsureVisibleAutoVScroll = "Specifies whether to scroll the grid automatically in the vertical direction to fully display the current cell.";
    public const string cMarginAfterLastCol = "Specifies the size of empty space after the last column.";
    public const string cMarginAfterLastRow = "Specifies the size of empty space after the last row.";
    public const string cCreateRowCellStyleDynamically = "Determines whether iGrid automatically creates the row's cell style object if it was not set.";
    public const string cPressedMouseMoveMode = "Determines the grid's behavior when the user moves the mouse pointer and the left mouse button is pressed.";
    public const string cProcessTab = "Determines whether the grid should process the Tab key.";
    public const string cProcessEnter = "Determines whether the grid should process the Enter key and start editing when it is pressed.";
    public const string cReadOnly = "Determines whether the cells can be edited.";
    public const string cRowMode = "Determines whether to select by row or by cell.";
    public const string cRowModeHasCurCell = "Determines whether to highlight the current cell in row mode.";
    public const string cRows = "The collection of the rows.";
    public const string cRowTextCol = "The parameters of the row text column. The cells of this column are displayed in the group rows and under the normal cells in the normal rows.";
    public const string cRowTextEndColFar = "Specifies the column the row text cell ends at. Its value specifies how many columns should be omitted from the right (or left in right-to-left mode).";
    public const string cRowTextStartColNear = "Specifies the column the row text cell starts at. Its value specifies how many columns should be omitted from the left (or right in right-to-left mode).";
    public const string cRowTextVisible = "Determines whether the row text cells are visible. The row text cells can be visible only in row mode.";
    public const string cScrollBarSettings = "The common parameters for the both vertical and horizontal scroll bars.";
    public const string cScrollBarSettingsOpacity = "Determines how opaque or transparent the scroll bars are. 0% are transparent, 100% are opaque.";
    public const string cScrollBarSettingsBackColor = "The background color of the scroll bars. If not set, the CellCtrlBackColor property of the grid is used.";
    public const string cScrollBarSettingsForeColor = "The color of the scroll bars' arrows. If not set, the CellCtrlForeColor property of the grid is used.";
    public const string cScrollBarSettingsUseXPStyles = "Determines whether to use the WindowsXP visual styles if they are available to display the scroll bars.";
    public const string cScrollBarSettingsAppearance = "The style of the scroll bars (3D or Flat).";
    public const string cScrollBarSettingsImageList = "The images displayed in the scroll bars' custom buttons.";
    public const string cScrollGroupRows = "Determines whether to scroll the group rows horizontally.";
    public const string cSelectInvisibleCells = "Determines whether to select the invisible cells when selecting multiple cells (using a combination with the Shift key or mouse pressed move).";
    public const string cSelectionMode = "The method in which cells are selected in the grid.";
    public const string cShowControlsInAllCells = "Determines whether the combo button is displayed only in the current cell or in all the cells with the Combo style.";
    public const string cSortByLevels = "Determines whether to take into account row levels when sorting.";
    public const string cStaySorted = "Determines whether a row changes its index according to the SortObject when the Value or other meaningful property of a cell in this row is changed.";
    public const string cUniqueKeys = "Determines whether to check the uniqueness of the row and column keys";
    public const string cUseXPStyles = "Determines whether to use the Windows visual styles if they are available to dispalay the controls in the cells (the combo buttons and check boxes).";
    public const string cGridLinesVertical = "The style of the vertical grid lines.";
    public const string cGridLinesVerticalExtended = "The style of the extended vertical grid lines.";
    public const string cGridLinesHorizontalExtended = "The style of the extended horizontal grid lines.";
    public const string cVScrollBar = "The set of the properties which allow you to set up the vertical scroll bar.";
    public const string cPrefixGroupValues = "Determines whether to include a column name in the text of the automatically created group rows if possible.";
    public const string cSilentValidation = "Determines whether to display a standard error message for a text box cell while converting an entered text to the cell's value.";
    public const string cCellValue = "The value used to display the cell's text.";
    public const string cCellImageIndex = "The index of the image displayed in the cell.";
    public const string cCellStyle = "A style object determining the appearance and behavior of the cell.";
    public const string cCellSpanCols = "Gets or sets the number of columns to span.";
    public const string cCellSpanRows = "Gets or sets the number of rows to span.";
    public const string cRowTextCell = "The row text cell of the row. The row text cells are displayed in the group rows and under the normal cells in the normal rows.";
    public const string cCellX = "The {0} cell in the row.";
    public const string cHotTracking = "Determines whether the cells, column headers, and scroll bar elements indicate hot state.";
    public const string cLayoutFlags = "A value indicating what information to save and restore using the LayoutString property.";
    public const string cGridLines = "Exposes the set of the grid lines’ properties.";
    public const string cGridLinesGroupRows = "The style of the horizontal grid lines in the group rows.";
    public const string cGridLinesVerticalLastCol = "The style of the vertical grid line in the last visible column.";
    public const string cGridLinesHorizontalLastRow = "The style of the horizontal grid line in the last visible row.";
    public const string cSingleClickEdit = "Determines whether the single mouse click starts editing a not current cell. If False, only the current cell can be edited with the single mouse click; otherwise, the single click on any of the cells starts its editing.";
    public const string cEllipsisButtonGlyph = "Determines the image to be drawn on the ellipsis buttons. If not specified an ellipsis will be drawn.";
    public const string cStartDragCellDelta = "Determines the distance the mouse pointer should be moved to start the drag-and-drop operation.";
    public const string cRowHeader = "Exposes the set of properties which allow you to set up the row header.";
    public const string cRowHdrWidth = "The width of the row header.";
    public const string cRowHdrVisible = "Determines whether the row header is visible or not.";
    public const string cRowHdrHotTracking = "Determines whether the row headers should indicate the hot state.";
    public const string cRowResizeMode = "Determines the areas of the grid where rows can be resized by using the mouse.";
    public const string cImmediateRowResizing = "Determines whether a row should be resized immediately as the user is dragging the edge of the rows's header.";
    public const string cRowHeaderDrawSystem = "Determines whether to display the row header using the system styles. Use in conjunction with the the UseXPStyles and Appearance properties.";
    public const string cRowHeaderUseXPStyles = "Determines whether to use the WindowsXP visual styles if they are available to display the row header. Acts only if the DrawSystem is True.";
    public const string cRowHeaderAppearance = "The style of the row header (3D or Flat). Acts only if the DrawSystem is True.";
    public const string cRowHeaderBackColor = "The background color of the row header. If not set, the CellCtrlBackColor is used.";
    public const string cRowHeaderVGridLinesStyle = "The style of the row header's vertical grid lines. Use this property when the DrawSystem is False.";
    public const string cRowHeaderHGridLinesStyle = "The style of the row header's horizontal grid lines. Use this property when the DrawSystem is False.";
    public const string cAutoHeightRowMode = "Determines whether to take into account the row header and/or cells of a row when adjusting its height.";
    public const string cRowSelectionInCellMode = "Determines whether and how rows can be selected in cell mode.";
    public const string cSearchAsTypeMode = "Determines the search-as-type behavior.";
    public const string cSearchAsTypeMatchRule = "Indicates how to determine whether a cell text matches the search string when searching as typing.";
    public const string cSearchAsTypeSearchCol = "Determines the column to search by when searching as typing.";
    public const string cSearchAsTypeStartFromCurRow = "Determines whether to start searching from the current row or from the first row when searching as typing.";
    public const string cSearchAsType = "Determines the search as type behavior of the grid.";
    public const string cSearchAsTypeDisplayKeyboardHint = "Determines whether to show keyboard hint (next/previous key combinations) when searching as typing.";
    public const string cSearchAsTypeDisplaySearchText = "Determines whether to show search text when searching as typing.";
    public const string cDropDownListDropDownMode = "Determines the search-as-type behavior when the list is shown as a drop-down control.";
    public const string cDropDownListAutoCompleteMode = "Determines the search-as-type behavior when the list is shown as an auto-complete control.";
    public const string cDropDownListMatchRule = "Indicates how to determine whether a drop-down item matches the search criterion when searching as typing.";
    public const string cDropDownListSearchAsType = "Determines the search as type behavior of the drop-down list.";
    public const string cDropDownListDisplaySearchTextIfNeeded = "Determines whether to display the search text when searching as typing if needed.";
    public const string cDropDownListDisplayKeyboardHintIfNeeded = "Determines whether to display the keyboard hint when searching as typing if needed.";
    public const string cUIStrings = "Allows you to specify standard strings used in iGrid user interface.";
    public const string cLocalStringsSearchWindowLabelNext = "The text which labels the next key combination in the search window (which appears while searching as typing).";
    public const string cLocalStringsSearchWindowLabelPrev = "The text which labels the previous key combination in the search window (which appears while searching as typing).";
    public const string cSearchAsTypeLoopSearch = "Indicates whether searching should be started from the beginning of the grid when no elements after the current row match the search criteria.";
    public const string cColorizeRowLevelIndent = "Determines whether to fill the level area of a row with the row style’s background color and the selection background color (if it is selected).";
    public const string cTreeCol = "The column which the tree buttons and branches are displayed in.";
    public const string cTreeLinesVisible = "Determines whether to draw the tree lines.";
    public const string cTreeLinesColor = "Determines the color of the tree lines.";
    public const string cTreeLinesShowRootLines = "Determines whether lines are drawn between the tree nodes that are at the root.";
    public const string cStretchComboButton = "Determines whether to stretch the combo button to the cell height.";
    public const string cCustomControlPaint = "The object which implements custom drawing of grid controls.";
    public const string cTreeLinesDashStyle = "Determines the dash style of the tree lines.";
    public const string cLevelIndent = "The width of the area which is taken by a level indent.";
    public const string cColPatternShowWhenGrouped = "Determines whether to show the column when it is grouped.";
    public const string cDropDownListACLSelFirstWhenFilter = "Determines whether to select the first item in auto-complete list in filter mode.";
    public const string cDropDownListAutoSubstitution = "Determines whether to automatically substitute the entered text with the corresponding value from the drop-down list.";
    public const string cDropDownListAutoSubstitutionCustomCompare = "Determines whether to use custom comparison when automatically substituting the entered text with the corresponding value from the drop-down list.";
    public const string cTextRenderingHint = "Gets or sets the rendering mode for all texts displayed in iGrid.";
  }
}
